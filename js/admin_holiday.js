// admin_holiday.js Î¶¨Ìå©ÌÜ†ÎßÅ Î≤ÑÏ†Ñ: Í≥µÍ≥µ Í≥µÌú¥Ïùº API Î≥ëÌï© Î∞è Í≥µÌú¥Ïùº ÏÑ§Î™Ö ÏûÖÎ†• ÏßÄÏõê

let apiHolidayList = [];
let customHolidayList = [];
let currentHolidayDetail = [];
let currentHolidays = [];
// admin_holiday.js ÏÉÅÎã®Ïóê Ï∂îÍ∞Ä
const HOLIDAY_API_BASE_URL = "https://mealbackend-cmub.onrender.com";

// Ï¥àÍ∏∞ Ïã§Ìñâ
window.addEventListener("DOMContentLoaded", () => {
  populateYearSelector();
  const year = new Date().getFullYear();
  document.getElementById("yearSelector").value = year;
  loadHolidays(year);
});

function populateYearSelector() {
  const selector = document.getElementById("yearSelector");
  const thisYear = new Date().getFullYear();
  for (let y = thisYear - 3; y <= thisYear + 3; y++) {
    const option = document.createElement("option");
    option.value = y;
    option.textContent = `${y}ÎÖÑ`;
    selector.appendChild(option);
  }
}

function updateCalendar() {
  const year = document.getElementById("yearSelector").value;
  loadHolidays(year);
}

async function loadHolidays(year) {
  const [apiList, customList] = await Promise.all([
    fetchPublicHolidays(year),
    getData(`/holidays?year=${year}`)
  ]);

  apiHolidayList = apiList.map(h => ({ ...h, source: 'api' }));
  customHolidayList = customList.map(h => ({ ...h, source: 'custom' }));

  const apiDates = new Set(apiHolidayList.map(h => h.date));
  const filteredCustom = customHolidayList.filter(h => !apiDates.has(h.date));

  const merged = [...apiHolidayList, ...filteredCustom];
  currentHolidayDetail = merged;
  currentHolidays = merged.map(h => h.date);

  renderCalendar(year);
  renderHolidayList(merged);
}

async function fetchPublicHolidays(year) {
  try {
    const res = await fetch(`${HOLIDAY_API_BASE_URL}/api/public-holidays?year=${year}`);
    const data = await res.json();

    // ÏùëÎãµÏù¥ Î∞∞Ïó¥Ïù∏ÏßÄ ÌôïÏù∏ (Î≥¥ÌÜµ: [{date: "2025-08-15", description: "Í¥ëÎ≥µÏ†à"}, ...])
    if (!Array.isArray(data)) {
      console.warn("‚ùó Í≥µÍ≥µ Í≥µÌú¥Ïùº ÏùëÎãµ ÌòïÏãù Ïù¥ÏÉÅ", data);
      return [];
    }

    return data.map(h => ({
      date: h.date,
      description: h.description || "Í≥µÌú¥Ïùº"
    }));
  } catch (err) {
    console.warn(`‚ùó Í≥µÍ≥µ Í≥µÌú¥Ïùº Ìò∏Ï∂ú Ïã§Ìå® (${year})`, err);
    return [];
  }
}
function renderCalendar(year) {
  const wrapper = document.getElementById("calendar-wrapper");
  wrapper.innerHTML = "";
  for (let month = 0; month < 12; month++) {
    const table = document.createElement("table");
    table.className = "month-calendar";

    const caption = document.createElement("caption");
    caption.innerText = `${month + 1}Ïõî`;
    table.appendChild(caption);

    const thead = document.createElement("thead");
    const days = ["S", "M", "T", "W", "T", "F", "S"];
    const headRow = document.createElement("tr");
    days.forEach(d => {
      const th = document.createElement("th");
      th.innerText = d;
      headRow.appendChild(th);
    });
    thead.appendChild(headRow);
    table.appendChild(thead);

    const tbody = document.createElement("tbody");
    const firstDay = new Date(year, month, 1).getDay();
    const lastDate = new Date(year, month + 1, 0).getDate();

    let row = document.createElement("tr");
    for (let i = 0; i < firstDay; i++) row.appendChild(document.createElement("td"));

    for (let date = 1; date <= lastDate; date++) {
      const td = document.createElement("td");
      const dateStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(date).padStart(2, "0")}`;
      td.innerText = date;
      td.setAttribute("data-date", dateStr);

      if (new Date(year, month, date).getDay() === 0) td.classList.add("sunday");
      if (currentHolidays.includes(dateStr)) td.classList.add("holiday");

      row.appendChild(td);
      if ((firstDay + date) % 7 === 0 || date === lastDate) {
        tbody.appendChild(row);
        row = document.createElement("tr");
      }
    }

    table.appendChild(tbody);
    wrapper.appendChild(table);
  }
}

function addHoliday() {
  const date = document.getElementById("holidayPicker").value;
  const description = document.getElementById("holidayDescription").value || "Í≥µÌú¥Ïùº";

  if (!date) return alert("ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!");
  const isAPIDuplicate = apiHolidayList.some(h => h.date === date);
  if (isAPIDuplicate) return alert("Í≥µÍ≥µÎç∞Ïù¥ÌÑ∞ Í≥µÌú¥ÏùºÍ≥º Ï§ëÎ≥µÎêòÏñ¥ Îì±Î°ùÌï† Ïàò ÏóÜÏäµÎãàÎã§.");

  const isCustomDuplicate = customHolidayList.some(h => h.date === date);
  if (isCustomDuplicate) return alert("Ïù¥ÎØ∏ Îì±Î°ùÎêú ÏàòÎèô Í≥µÌú¥ÏùºÏûÖÎãàÎã§.");

  postData("/holidays", { date, description },
    () => {
      loadHolidays(new Date(date).getFullYear());
      document.getElementById("holidayPicker").value = "";
      document.getElementById("holidayDescription").value = "";
      showToast("‚úÖ Í≥µÌú¥Ïùº Ï∂îÍ∞Ä ÏôÑÎ£å");
    },
    err => showToast("‚ùå Ï∂îÍ∞Ä Ïã§Ìå®: " + err.message)
  );
}

function deleteHoliday(date) {
  if (!confirm(`${date} Í≥µÌú¥ÏùºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) return;
  deleteData(`/holidays?date=${date}`,
    () => {
      loadHolidays(new Date(date).getFullYear());
      showToast("üóë ÏÇ≠Ï†ú ÏôÑÎ£å");
    }
  );
}

function renderHolidayList(holidays) {
  const list = document.getElementById("holidayItems");
  list.innerHTML = "";

  holidays.forEach(h => {
    const item = document.createElement("div");
    item.className = "holiday-item";
    item.innerHTML = `
      <span>${h.date} (${h.description})</span>
      ${h.source === 'custom' ? `<button onclick="deleteHoliday('${h.date}')">ÏÇ≠Ï†ú</button>` : '<span class="readonly">Í≥µÍ≥µ</span>'}
    `;
    list.appendChild(item);
  });
}
